//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `First background color`.
    static let firstBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "First background color")
    /// Color `Let'sGoButtonColor`.
    static let letSGoButtonColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Let'sGoButtonColor")
    /// Color `Second background color`.
    static let secondBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Second background color")
    /// Color `buttonColor`.
    static let buttonColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "buttonColor")
    /// Color `descriptionColor`.
    static let descriptionColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "descriptionColor")
    /// Color `titleAndLabelColor`.
    static let titleAndLabelColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "titleAndLabelColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "First background color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func firstBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.firstBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Let'sGoButtonColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func letSGoButtonColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.letSGoButtonColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Second background color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "buttonColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "descriptionColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func descriptionColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.descriptionColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "titleAndLabelColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func titleAndLabelColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.titleAndLabelColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "First background color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func firstBackgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.firstBackgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Let'sGoButtonColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func letSGoButtonColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.letSGoButtonColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Second background color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondBackgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondBackgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "buttonColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "descriptionColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func descriptionColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.descriptionColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "titleAndLabelColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func titleAndLabelColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.titleAndLabelColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `GoodDogs`.
    static let goodDogs = Rswift.ImageResource(bundle: R.hostingBundle, name: "GoodDogs")
    /// Image `apple icon`.
    static let appleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple icon")
    /// Image `arrow circle icon`.
    static let arrowCircleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow circle icon")
    /// Image `bird logo`.
    static let birdLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "bird logo")
    /// Image `cupImage`.
    static let cupImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "cupImage")
    /// Image `facebook icon`.
    static let facebookIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook icon")
    /// Image `logotipTakee`.
    static let logotipTakee = Rswift.ImageResource(bundle: R.hostingBundle, name: "logotipTakee")
    /// Image `mapImage`.
    static let mapImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapImage")
    /// Image `phone icon`.
    static let phoneIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone icon")
    /// Image `tagImage`.
    static let tagImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "tagImage")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GoodDogs", bundle: ..., traitCollection: ...)`
    static func goodDogs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodDogs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "apple icon", bundle: ..., traitCollection: ...)`
    static func appleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appleIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow circle icon", bundle: ..., traitCollection: ...)`
    static func arrowCircleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowCircleIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bird logo", bundle: ..., traitCollection: ...)`
    static func birdLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.birdLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cupImage", bundle: ..., traitCollection: ...)`
    static func cupImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cupImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook icon", bundle: ..., traitCollection: ...)`
    static func facebookIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logotipTakee", bundle: ..., traitCollection: ...)`
    static func logotipTakee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logotipTakee, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapImage", bundle: ..., traitCollection: ...)`
    static func mapImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone icon", bundle: ..., traitCollection: ...)`
    static func phoneIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tagImage", bundle: ..., traitCollection: ...)`
    static func tagImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tagImage, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `OleksandrKharchenko_CoffeShopCell`.
    static let oleksandrKharchenko_CoffeShopCell = _R.nib._OleksandrKharchenko_CoffeShopCell()
    /// Nib `OleksandrKharchenko_CoffeShopViewController`.
    static let oleksandrKharchenko_CoffeShopViewController = _R.nib._OleksandrKharchenko_CoffeShopViewController()
    /// Nib `OleksandrKharchenko_StartScreenViewController`.
    static let oleksandrKharchenko_StartScreenViewController = _R.nib._OleksandrKharchenko_StartScreenViewController()
    /// Nib `YeYa_CoffeeShopCell`.
    static let yeYa_CoffeeShopCell = _R.nib._YeYa_CoffeeShopCell()
    /// Nib `YefimYakuninCoffeShopChallengeViewController`.
    static let yefimYakuninCoffeShopChallengeViewController = _R.nib._YefimYakuninCoffeShopChallengeViewController()
    /// Nib `YefimYakuninGamingScreenViewController`.
    static let yefimYakuninGamingScreenViewController = _R.nib._YefimYakuninGamingScreenViewController()
    /// Nib `YefimYakunin_StartScreenViewController`.
    static let yefimYakunin_StartScreenViewController = _R.nib._YefimYakunin_StartScreenViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OleksandrKharchenko_CoffeShopCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oleksandrKharchenko_CoffeShopCell) instead")
    static func oleksandrKharchenko_CoffeShopCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oleksandrKharchenko_CoffeShopCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OleksandrKharchenko_CoffeShopViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oleksandrKharchenko_CoffeShopViewController) instead")
    static func oleksandrKharchenko_CoffeShopViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oleksandrKharchenko_CoffeShopViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OleksandrKharchenko_StartScreenViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oleksandrKharchenko_StartScreenViewController) instead")
    static func oleksandrKharchenko_StartScreenViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oleksandrKharchenko_StartScreenViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YeYa_CoffeeShopCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yeYa_CoffeeShopCell) instead")
    static func yeYa_CoffeeShopCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yeYa_CoffeeShopCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YefimYakuninCoffeShopChallengeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yefimYakuninCoffeShopChallengeViewController) instead")
    static func yefimYakuninCoffeShopChallengeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yefimYakuninCoffeShopChallengeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YefimYakuninGamingScreenViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yefimYakuninGamingScreenViewController) instead")
    static func yefimYakuninGamingScreenViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yefimYakuninGamingScreenViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YefimYakunin_StartScreenViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yefimYakunin_StartScreenViewController) instead")
    static func yefimYakunin_StartScreenViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yefimYakunin_StartScreenViewController)
    }
    #endif

    static func oleksandrKharchenko_CoffeShopCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OleksandrKharchenko_CoffeShopCell? {
      return R.nib.oleksandrKharchenko_CoffeShopCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OleksandrKharchenko_CoffeShopCell
    }

    static func oleksandrKharchenko_CoffeShopViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oleksandrKharchenko_CoffeShopViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oleksandrKharchenko_StartScreenViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oleksandrKharchenko_StartScreenViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func yeYa_CoffeeShopCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YeYa_CoffeeShopCell? {
      return R.nib.yeYa_CoffeeShopCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YeYa_CoffeeShopCell
    }

    static func yefimYakuninCoffeShopChallengeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.yefimYakuninCoffeShopChallengeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func yefimYakuninGamingScreenViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.yefimYakuninGamingScreenViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func yefimYakunin_StartScreenViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.yefimYakunin_StartScreenViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.texts` struct is generated, and contains static references to 7 localization keys.
    struct texts {
      /// en translation:  Terms and Conditions.
      ///
      /// Locales: en, uk
      static let gamingScreenSecondPartOfText = Rswift.StringResource(key: "GamingScreen.secondPartOfText", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: By creating an account or signing you agree to our
      ///
      /// Locales: en, uk
      static let gamingScreenFirstPartOfText = Rswift.StringResource(key: "GamingScreen.firstPartOfText", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Forgot your password?
      ///
      /// Locales: en, uk
      static let gamingScreenForgotPassLabel = Rswift.StringResource(key: "GamingScreen.forgotPassLabel", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Gaming
      ///
      /// Locales: en, uk
      static let gamingScreenTitleLabel = Rswift.StringResource(key: "GamingScreen.titleLabel", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: SIGN IN WITH APPLE
      ///
      /// Locales: en, uk
      static let gamingScreenAppleButtonTitle = Rswift.StringResource(key: "GamingScreen.appleButtonTitle", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: SIGN IN WITH FACEBOOK
      ///
      /// Locales: en, uk
      static let gamingScreenFbButtonTitle = Rswift.StringResource(key: "GamingScreen.fbButtonTitle", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: SIGN IN WITH PHONE
      ///
      /// Locales: en, uk
      static let gamingScreenPhoneButtonTitle = Rswift.StringResource(key: "GamingScreen.phoneButtonTitle", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)

      /// en translation:  Terms and Conditions.
      ///
      /// Locales: en, uk
      static func gamingScreenSecondPartOfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GamingScreen.secondPartOfText", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "GamingScreen.secondPartOfText"
        }

        return NSLocalizedString("GamingScreen.secondPartOfText", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: By creating an account or signing you agree to our
      ///
      /// Locales: en, uk
      static func gamingScreenFirstPartOfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GamingScreen.firstPartOfText", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "GamingScreen.firstPartOfText"
        }

        return NSLocalizedString("GamingScreen.firstPartOfText", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Forgot your password?
      ///
      /// Locales: en, uk
      static func gamingScreenForgotPassLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GamingScreen.forgotPassLabel", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "GamingScreen.forgotPassLabel"
        }

        return NSLocalizedString("GamingScreen.forgotPassLabel", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Gaming
      ///
      /// Locales: en, uk
      static func gamingScreenTitleLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GamingScreen.titleLabel", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "GamingScreen.titleLabel"
        }

        return NSLocalizedString("GamingScreen.titleLabel", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: SIGN IN WITH APPLE
      ///
      /// Locales: en, uk
      static func gamingScreenAppleButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GamingScreen.appleButtonTitle", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "GamingScreen.appleButtonTitle"
        }

        return NSLocalizedString("GamingScreen.appleButtonTitle", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: SIGN IN WITH FACEBOOK
      ///
      /// Locales: en, uk
      static func gamingScreenFbButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GamingScreen.fbButtonTitle", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "GamingScreen.fbButtonTitle"
        }

        return NSLocalizedString("GamingScreen.fbButtonTitle", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: SIGN IN WITH PHONE
      ///
      /// Locales: en, uk
      static func gamingScreenPhoneButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GamingScreen.phoneButtonTitle", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "GamingScreen.phoneButtonTitle"
        }

        return NSLocalizedString("GamingScreen.phoneButtonTitle", tableName: "Texts", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _OleksandrKharchenko_CoffeShopCell.validate()
      try _OleksandrKharchenko_CoffeShopViewController.validate()
      try _OleksandrKharchenko_StartScreenViewController.validate()
      try _YeYa_CoffeeShopCell.validate()
      try _YefimYakuninGamingScreenViewController.validate()
      try _YefimYakunin_StartScreenViewController.validate()
    }

    struct _OleksandrKharchenko_CoffeShopCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OleksandrKharchenko_CoffeShopCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OleksandrKharchenko_CoffeShopCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OleksandrKharchenko_CoffeShopCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tagImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tagImage' is used in nib 'OleksandrKharchenko_CoffeShopCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "descriptionColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'descriptionColor' is used in nib 'OleksandrKharchenko_CoffeShopCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "titleAndLabelColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'titleAndLabelColor' is used in nib 'OleksandrKharchenko_CoffeShopCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OleksandrKharchenko_CoffeShopViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OleksandrKharchenko_CoffeShopViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cupImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cupImage' is used in nib 'OleksandrKharchenko_CoffeShopViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mapImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mapImage' is used in nib 'OleksandrKharchenko_CoffeShopViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "buttonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'buttonColor' is used in nib 'OleksandrKharchenko_CoffeShopViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "descriptionColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'descriptionColor' is used in nib 'OleksandrKharchenko_CoffeShopViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OleksandrKharchenko_StartScreenViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OleksandrKharchenko_StartScreenViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "GoodDogs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GoodDogs' is used in nib 'OleksandrKharchenko_StartScreenViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logotipTakee", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logotipTakee' is used in nib 'OleksandrKharchenko_StartScreenViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "let'sGoButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'let'sGoButtonColor' is used in nib 'OleksandrKharchenko_StartScreenViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'OleksandrKharchenko_StartScreenViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _YeYa_CoffeeShopCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "YeYa_CoffeeShopCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YeYa_CoffeeShopCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YeYa_CoffeeShopCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tagImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tagImage' is used in nib 'YeYa_CoffeeShopCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "descriptionColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'descriptionColor' is used in nib 'YeYa_CoffeeShopCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _YefimYakuninCoffeShopChallengeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "YefimYakuninCoffeShopChallengeViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _YefimYakuninGamingScreenViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "YefimYakuninGamingScreenViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bird logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bird logo' is used in nib 'YefimYakuninGamingScreenViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _YefimYakunin_StartScreenViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "YefimYakunin_StartScreenViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "GoodDogs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GoodDogs' is used in nib 'YefimYakunin_StartScreenViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logotipTakee", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logotipTakee' is used in nib 'YefimYakunin_StartScreenViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "let'sGoButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'let'sGoButtonColor' is used in nib 'YefimYakunin_StartScreenViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'YefimYakunin_StartScreenViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
